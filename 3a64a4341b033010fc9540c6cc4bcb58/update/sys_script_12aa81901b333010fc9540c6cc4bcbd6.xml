<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_173073_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
/*
    // rightnow stores the current time
    var rightnow = new GlideDateTime();

    // Create a GlideDateTime object for the When needed date
    var whenNeeded = new GlideDateTime(current.u_when_needed);

    //Get the dates and compare. If same abort it from saving
    var todaysDate = rightnow.getLocalDate();
    var neededDate = whenNeeded.getLocalDate();

    if (todaysDate.compareTo(neededDate) == 0) {
        gs.addErrorMessage("You cannot submit NeedIt requests for today.");
        current.setAbortAction(true);
    } else {

        // If the When needed date is before rightnow, do not write the record to the database
        // Output an error message to the screen
        if (whenNeeded.before(rightnow)) {
            gs.addErrorMessage("When needed date cannot be in the past.  Your request has not been saved to the database.");
            current.setAbortAction(true);
        }
    }
	*/
	
	var niUtils = new NeedItUtils();
	var isPast = niUtils.isDatePast(current.u_when_needed);
	var isToday = niUtils.isDateToday(current.u_when_needed);
	if(isPast == true)
		{
			gs.addErrorMessage("When needed date can't be in the past");
			current.setAbortAction(true);
		}
	 if (isToday == true)
		{
			gs.addErrorMessage("Today's date is not valid. Please select a future date");
			current.setAbortAction(true);
		}
	

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-11-09 09:33:59</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>12aa81901b333010fc9540c6cc4bcbd6</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_173073_needit">3a64a4341b033010fc9540c6cc4bcb58</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">3a64a4341b033010fc9540c6cc4bcb58</sys_scope>
        <sys_update_name>sys_script_12aa81901b333010fc9540c6cc4bcbd6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-11-18 06:28:20</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=12aa81901b333010fc9540c6cc4bcbd6"/>
</record_update>
